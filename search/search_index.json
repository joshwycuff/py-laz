{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Laz A CLI tool to configure and run parameterized actions against targets. Installation Laz currently requires Python 3.8+. pip3 install --user laz You can check your installation by running: laz version Documentation https://joshwycuff.github.io/py-laz/ Github https://github.com/joshwycuff/py-laz","title":"Laz"},{"location":"#laz","text":"A CLI tool to configure and run parameterized actions against targets.","title":"Laz"},{"location":"#installation","text":"Laz currently requires Python 3.8+. pip3 install --user laz You can check your installation by running: laz version","title":"Installation"},{"location":"#documentation","text":"https://joshwycuff.github.io/py-laz/","title":"Documentation"},{"location":"#github","text":"https://github.com/joshwycuff/py-laz","title":"Github"},{"location":"cli/","text":"CLI Usage laz [-h] [-v] <command> [<arg1>] ... [<argN>] Global Options -h (--help) Display help message -v (--verbose) Increase verbosity of log messages Commands help Display help message laz help init Initialize a directory with an example laz.yml laz init Configuration/Target path to run arguments against laz <path> [<arg1>] ... [<argN>] tree Display tree structure of laz.yml files in current project laz tree [--show-targets] version Display current Laz package version laz version","title":"CLI"},{"location":"cli/#cli","text":"","title":"CLI"},{"location":"cli/#usage","text":"laz [-h] [-v] <command> [<arg1>] ... [<argN>]","title":"Usage"},{"location":"cli/#global-options","text":"-h (--help) Display help message -v (--verbose) Increase verbosity of log messages","title":"Global Options"},{"location":"cli/#commands","text":"","title":"Commands"},{"location":"cli/#help","text":"Display help message laz help","title":"help"},{"location":"cli/#init","text":"Initialize a directory with an example laz.yml laz init","title":"init"},{"location":"cli/#_1","text":"Configuration/Target path to run arguments against laz <path> [<arg1>] ... [<argN>]","title":""},{"location":"cli/#tree","text":"Display tree structure of laz.yml files in current project laz tree [--show-targets]","title":"tree"},{"location":"cli/#version","text":"Display current Laz package version laz version","title":"version"},{"location":"quick_start/","text":"Quick Start Configuration File A basic example configuration file may look like the following: env: ENV_VAR: value targets: prod: dev: actions: default: echo default hello: echo hello The above configuration file defines a few different things: An environment variable named ENV_VAR with the value value to be exposed to all commands run by Laz. Two targets: prod and dev . Two defined actions, default and example . They simply invoke shells which echo \"default\" and \" example\", respectively. Note that nothing is stopping you from storing additional information in other top-level keys. This is useful for plugins. Targets A typical Laz command looks like the following: laz <path> [<arg1>] ... [<argN>] A Laz command will not run if the given path does not resolve to defined targets. For example, to run a command against the dev target defined in the previous example configuration file, you would run something like: $ laz dev echo hello hello You can run commands against multiple targets using glob patterns: $ laz \"*\" echo hello hello hello Actions You can also codify commands as actions and refer to them from the cli. The previous configuration example contains an action called hello that also echos \"hello\". $ laz dev hello hello Actions can also have sub-actions in the form of a list. If you have a set of commands that you run often, you can codify them as an action as well. targets: dev: actions: default: echo i am the default action things: - echo thing 1 - echo thing 2 $ laz dev things thing 1 thing 2 If you do not provide an action, Laz will attempt to run a default action. $ laz dev i am the default action Jinja Variables Laz uses Jinja to provide access to the entire configuration context during the evaluation of Jinja variables. For example, if you want to print out an arbitrary configuration field: # located in ~/projects/project-a abc: def ghi: jkl: mno target: dev: $ laz dev echo \"{{ abc }}\" def $ laz dev echo \"{{ ghi.jkl }}\" mno There are other special values added to the configuration dynamically such as the name of the configuration file (which is the same as the name of the folder) and the name of the current target. $ laz dev echo \"{{ name }}\" project-a $ laz dev echo \"{{ target.name }}\" dev Hooks Hooks can be used to perform actions before or after certain points in the program. The built-in hooks that are available are: before_all - Runs before all targets. before_target - Runs before each target. after_target - Runs after each target. after_all - Runs after all targets. target: dev: prod: hooks: before_all: echo before all before_target: echo before target after_target: echo after target after_all: echo after all $ laz \"*\" echo \"{{ target.name }}\" before all before target dev after target before target prod after target after all","title":"Quick Start"},{"location":"quick_start/#quick-start","text":"","title":"Quick Start"},{"location":"quick_start/#configuration-file","text":"A basic example configuration file may look like the following: env: ENV_VAR: value targets: prod: dev: actions: default: echo default hello: echo hello The above configuration file defines a few different things: An environment variable named ENV_VAR with the value value to be exposed to all commands run by Laz. Two targets: prod and dev . Two defined actions, default and example . They simply invoke shells which echo \"default\" and \" example\", respectively. Note that nothing is stopping you from storing additional information in other top-level keys. This is useful for plugins.","title":"Configuration File"},{"location":"quick_start/#targets","text":"A typical Laz command looks like the following: laz <path> [<arg1>] ... [<argN>] A Laz command will not run if the given path does not resolve to defined targets. For example, to run a command against the dev target defined in the previous example configuration file, you would run something like: $ laz dev echo hello hello You can run commands against multiple targets using glob patterns: $ laz \"*\" echo hello hello hello","title":"Targets"},{"location":"quick_start/#actions","text":"You can also codify commands as actions and refer to them from the cli. The previous configuration example contains an action called hello that also echos \"hello\". $ laz dev hello hello Actions can also have sub-actions in the form of a list. If you have a set of commands that you run often, you can codify them as an action as well. targets: dev: actions: default: echo i am the default action things: - echo thing 1 - echo thing 2 $ laz dev things thing 1 thing 2 If you do not provide an action, Laz will attempt to run a default action. $ laz dev i am the default action","title":"Actions"},{"location":"quick_start/#jinja-variables","text":"Laz uses Jinja to provide access to the entire configuration context during the evaluation of Jinja variables. For example, if you want to print out an arbitrary configuration field: # located in ~/projects/project-a abc: def ghi: jkl: mno target: dev: $ laz dev echo \"{{ abc }}\" def $ laz dev echo \"{{ ghi.jkl }}\" mno There are other special values added to the configuration dynamically such as the name of the configuration file (which is the same as the name of the folder) and the name of the current target. $ laz dev echo \"{{ name }}\" project-a $ laz dev echo \"{{ target.name }}\" dev","title":"Jinja Variables"},{"location":"quick_start/#hooks","text":"Hooks can be used to perform actions before or after certain points in the program. The built-in hooks that are available are: before_all - Runs before all targets. before_target - Runs before each target. after_target - Runs after each target. after_all - Runs after all targets. target: dev: prod: hooks: before_all: echo before all before_target: echo before target after_target: echo after target after_all: echo after all $ laz \"*\" echo \"{{ target.name }}\" before all before target dev after target before target prod after target after all","title":"Hooks"},{"location":"advanced/","text":"Advanced Nested Sub-Projects","title":"Advanced"},{"location":"advanced/#advanced","text":"","title":"Advanced"},{"location":"advanced/#nested-sub-projects","text":"","title":"Nested Sub-Projects"},{"location":"advanced/actions/","text":"Actions Shell Action Example actions: example: echo hello Python Action Example actions: example: python: print('hello') Multiple Actions Example actions: example: - echo 1 - echo 2 Conditional Action Example actions: example: condition: \"[[ -z $USER ]]\" if: echo $USER else: echo no user Switch Action Example actions: example: switch: python: print('x') x: echo x y: echo y","title":"Actions"},{"location":"advanced/actions/#actions","text":"","title":"Actions"},{"location":"advanced/actions/#shell-action","text":"","title":"Shell Action"},{"location":"advanced/actions/#example","text":"actions: example: echo hello","title":"Example"},{"location":"advanced/actions/#python-action","text":"","title":"Python Action"},{"location":"advanced/actions/#example_1","text":"actions: example: python: print('hello')","title":"Example"},{"location":"advanced/actions/#multiple-actions","text":"","title":"Multiple Actions"},{"location":"advanced/actions/#example_2","text":"actions: example: - echo 1 - echo 2","title":"Example"},{"location":"advanced/actions/#conditional-action","text":"","title":"Conditional Action"},{"location":"advanced/actions/#example_3","text":"actions: example: condition: \"[[ -z $USER ]]\" if: echo $USER else: echo no user","title":"Example"},{"location":"advanced/actions/#switch-action","text":"","title":"Switch Action"},{"location":"advanced/actions/#example_4","text":"actions: example: switch: python: print('x') x: echo x y: echo y","title":"Example"},{"location":"advanced/concepts/","text":"Concepts Project Configuration Inheritance Action Actions are commands, functions, or tasks to be run. They can be as simple as a single CLI command or as complicated as a series of CLI commands, Python functions, and plugin actions. CLI commands can be run by Laz without codifying them in a laz.yml. Complicated or common tasks can be codified in a laz.yml as actions. Target All actions must be performed against a target. For example, common targets might be environments such as prod and dev.","title":"Concepts"},{"location":"advanced/concepts/#concepts","text":"","title":"Concepts"},{"location":"advanced/concepts/#project","text":"","title":"Project"},{"location":"advanced/concepts/#configuration","text":"","title":"Configuration"},{"location":"advanced/concepts/#inheritance","text":"","title":"Inheritance"},{"location":"advanced/concepts/#action","text":"Actions are commands, functions, or tasks to be run. They can be as simple as a single CLI command or as complicated as a series of CLI commands, Python functions, and plugin actions. CLI commands can be run by Laz without codifying them in a laz.yml. Complicated or common tasks can be codified in a laz.yml as actions.","title":"Action"},{"location":"advanced/concepts/#target","text":"All actions must be performed against a target. For example, common targets might be environments such as prod and dev.","title":"Target"},{"location":"advanced/configuration/","text":"Configuration targets Configure targets. targets: dev: $ laz dev echo '{{ target.name }}' dev A target's configuration also overrides the parent configuration if provided. property: x targets: dev: prod: property: y $ laz \"*\" echo '{{ target.name }}' '{{ property }}' dev x prod y env Configure environment variables. env: name: value targets: dev: $ laz dev echo '$name' value laz Configure Laz behavior. Default Target laz: default_target: dev # defaults to \"default\" targets: dev: $ laz / echo '{{ target.name }}' dev Error when path resolves to no targets By default, nothing happens if the given path does not resolve to any defined targets. If the desired behavior is to error, this can be configured. laz: error_on_no_targets: true # defaults to false targets: dev: $ laz not-a-target echo '{{ target.name }}' [ERROR] Given path resolved to zero targets","title":"Configuration"},{"location":"advanced/configuration/#configuration","text":"","title":"Configuration"},{"location":"advanced/configuration/#targets","text":"Configure targets. targets: dev: $ laz dev echo '{{ target.name }}' dev A target's configuration also overrides the parent configuration if provided. property: x targets: dev: prod: property: y $ laz \"*\" echo '{{ target.name }}' '{{ property }}' dev x prod y","title":"targets"},{"location":"advanced/configuration/#env","text":"Configure environment variables. env: name: value targets: dev: $ laz dev echo '$name' value","title":"env"},{"location":"advanced/configuration/#laz","text":"Configure Laz behavior.","title":"laz"},{"location":"advanced/configuration/#default-target","text":"laz: default_target: dev # defaults to \"default\" targets: dev: $ laz / echo '{{ target.name }}' dev","title":"Default Target"},{"location":"advanced/configuration/#error-when-path-resolves-to-no-targets","text":"By default, nothing happens if the given path does not resolve to any defined targets. If the desired behavior is to error, this can be configured. laz: error_on_no_targets: true # defaults to false targets: dev: $ laz not-a-target echo '{{ target.name }}' [ERROR] Given path resolved to zero targets","title":"Error when path resolves to no targets"},{"location":"advanced/project_structure/","text":"Project Structure A Laz project consists of at least one directory containing a laz.yml configuration file. A project can have multiple directories with each of them having 0 or 1 laz.yml files except for the top level which must have 1. Lower-level directories containing a laz.yml file are called sub-projects. A single-level Laz project: project-root/ \u251c\u2500 laz.yml A multi-level Laz project: project-root/ \u251c\u2500 sub-project-1/ \u2502 \u251c\u2500 laz.yml \u251c\u2500 sub-project-2/ \u2502 \u251c\u2500 laz.yml \u251c\u2500 not-laz-sub-project/ \u251c\u2500 laz.yml A laz.yml encapsulates the configuration for a directory. It also inherits and/or overrides the configurations found in parent directories within the same project. Let's say the configuration files have the below contents. # project-root/laz.yml env: prop: x targets: dev: prod: # project-root/sub-project-1/laz.yml env: prop: y # project-root/sub-project-2/laz.yml targets: qa: The effective configurations after inheritance and overrides are: # project-root/laz.yml env: prop: x targets: dev: prod: # project-root/sub-project-1/laz.yml env: prop: y targets: dev: prod: # project-root/sub-project-2/laz.yml env: prop: x targets: dev: prod: qa: In the above project, if you wanted to run a command against the dev target of sub-project-1, you would run the following: $ laz sub-project-1/dev echo '$prop' y Or you could run a command against every dev target: $ laz dev echo '{{ name }}' '$prop' project-root x sub-project-1 y sub-project-2 x Or you could run a command against only sub-project dev targets: $ laz '*/dev' echo '{{ name }}' '$prop' sub-project-1 y sub-project-2 x","title":"Project Structure"},{"location":"advanced/project_structure/#project-structure","text":"A Laz project consists of at least one directory containing a laz.yml configuration file. A project can have multiple directories with each of them having 0 or 1 laz.yml files except for the top level which must have 1. Lower-level directories containing a laz.yml file are called sub-projects. A single-level Laz project: project-root/ \u251c\u2500 laz.yml A multi-level Laz project: project-root/ \u251c\u2500 sub-project-1/ \u2502 \u251c\u2500 laz.yml \u251c\u2500 sub-project-2/ \u2502 \u251c\u2500 laz.yml \u251c\u2500 not-laz-sub-project/ \u251c\u2500 laz.yml A laz.yml encapsulates the configuration for a directory. It also inherits and/or overrides the configurations found in parent directories within the same project. Let's say the configuration files have the below contents. # project-root/laz.yml env: prop: x targets: dev: prod: # project-root/sub-project-1/laz.yml env: prop: y # project-root/sub-project-2/laz.yml targets: qa: The effective configurations after inheritance and overrides are: # project-root/laz.yml env: prop: x targets: dev: prod: # project-root/sub-project-1/laz.yml env: prop: y targets: dev: prod: # project-root/sub-project-2/laz.yml env: prop: x targets: dev: prod: qa: In the above project, if you wanted to run a command against the dev target of sub-project-1, you would run the following: $ laz sub-project-1/dev echo '$prop' y Or you could run a command against every dev target: $ laz dev echo '{{ name }}' '$prop' project-root x sub-project-1 y sub-project-2 x Or you could run a command against only sub-project dev targets: $ laz '*/dev' echo '{{ name }}' '$prop' sub-project-1 y sub-project-2 x","title":"Project Structure"},{"location":"plugins/","text":"Plugins","title":"Plugins"},{"location":"plugins/#plugins","text":"","title":"Plugins"},{"location":"plugins/aws/","text":"AWS Plugin Environment Configuration aws: profile: <profile name> region: <region name> Assume Role actions: example: - aws: assume_role: RoleArn: <role arn> - aws sts get-caller-identity Arbitrary AWS (boto3) Actions actions: example: aws: <service>: <subcommand>: <key>: <value>","title":"AWS Plugin"},{"location":"plugins/aws/#aws-plugin","text":"","title":"AWS Plugin"},{"location":"plugins/aws/#environment-configuration","text":"aws: profile: <profile name> region: <region name>","title":"Environment Configuration"},{"location":"plugins/aws/#assume-role","text":"actions: example: - aws: assume_role: RoleArn: <role arn> - aws sts get-caller-identity","title":"Assume Role"},{"location":"plugins/aws/#arbitrary-aws-boto3-actions","text":"actions: example: aws: <service>: <subcommand>: <key>: <value>","title":"Arbitrary AWS (boto3) Actions"},{"location":"plugins/jinja/","text":"Jinja Plugin","title":"Jinja Plugin"},{"location":"plugins/jinja/#jinja-plugin","text":"","title":"Jinja Plugin"},{"location":"plugins/terraform/","text":"Terraform Plugin","title":"Terraform Plugin"},{"location":"plugins/terraform/#terraform-plugin","text":"","title":"Terraform Plugin"}]}