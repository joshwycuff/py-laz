{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Laz A CLI tool to configure and run parameterized actions against targets. Installation Laz currently requires Python 3.8+. pip3 install --user laz You can check your installation by running: laz version Documentation https://joshwycuff.github.io/py-laz/","title":"Laz"},{"location":"#laz","text":"A CLI tool to configure and run parameterized actions against targets.","title":"Laz"},{"location":"#installation","text":"Laz currently requires Python 3.8+. pip3 install --user laz You can check your installation by running: laz version","title":"Installation"},{"location":"#documentation","text":"https://joshwycuff.github.io/py-laz/","title":"Documentation"},{"location":"actions/","text":"Actions Shell Action Example actions: example: echo hello Python Action Example actions: example: python: print('hello') Multiple Actions Example actions: example: - echo 1 - echo 2 Conditional Action Example actions: example: condition: \"[[ -z $USER ]]\" if: echo $USER else: echo no user Switch Action Example actions: example: switch: python: print('x') x: echo x y: echo y","title":"Actions"},{"location":"actions/#actions","text":"","title":"Actions"},{"location":"actions/#shell-action","text":"","title":"Shell Action"},{"location":"actions/#example","text":"actions: example: echo hello","title":"Example"},{"location":"actions/#python-action","text":"","title":"Python Action"},{"location":"actions/#example_1","text":"actions: example: python: print('hello')","title":"Example"},{"location":"actions/#multiple-actions","text":"","title":"Multiple Actions"},{"location":"actions/#example_2","text":"actions: example: - echo 1 - echo 2","title":"Example"},{"location":"actions/#conditional-action","text":"","title":"Conditional Action"},{"location":"actions/#example_3","text":"actions: example: condition: \"[[ -z $USER ]]\" if: echo $USER else: echo no user","title":"Example"},{"location":"actions/#switch-action","text":"","title":"Switch Action"},{"location":"actions/#example_4","text":"actions: example: switch: python: print('x') x: echo x y: echo y","title":"Example"},{"location":"cli/","text":"CLI Usage laz [-h] [-v] <command> [<arg1>] ... [<argN>] Global Options -h (--help) Display help message -v (--verbose) Increase verbosity of log messages Commands help Display help message laz help init Initialize a directory with an example laz.yml laz init Configuration/Target path to run arguments against laz <path> [<arg1>] ... [<argN>] tree Display tree structure of laz.yml files in current project laz tree [--show-targets] version Display current Laz package version laz version","title":"CLI"},{"location":"cli/#cli","text":"","title":"CLI"},{"location":"cli/#usage","text":"laz [-h] [-v] <command> [<arg1>] ... [<argN>]","title":"Usage"},{"location":"cli/#global-options","text":"-h (--help) Display help message -v (--verbose) Increase verbosity of log messages","title":"Global Options"},{"location":"cli/#commands","text":"","title":"Commands"},{"location":"cli/#help","text":"Display help message laz help","title":"help"},{"location":"cli/#init","text":"Initialize a directory with an example laz.yml laz init","title":"init"},{"location":"cli/#_1","text":"Configuration/Target path to run arguments against laz <path> [<arg1>] ... [<argN>]","title":""},{"location":"cli/#tree","text":"Display tree structure of laz.yml files in current project laz tree [--show-targets]","title":"tree"},{"location":"cli/#version","text":"Display current Laz package version laz version","title":"version"},{"location":"concepts/","text":"Concepts Project A Laz project consists of at least one directory containing a laz.yml configuration file. A project can have multiple directories with each of them having 0 or 1 laz.yml files except for the top level which must have 1. Lower-level directories containing a laz.yml file are called sub-projects. Configuration A laz.yml encapsulates the configuration for a directory. It also inherits and/or overrides the configurations found in parent directories within the same project. Inheritance Sub-projects \"inherit\" configuration from parent projects but will also overwrite configuration that they share. Action Actions are commands, functions, or tasks to be run. They can be as simple as a single CLI command or as complicated as a series of CLI commands, Python functions, and plugin actions. CLI commands can be run by Laz without codifying them in a laz.yml. Complicated or common tasks can be codified in a laz.yml as actions. Target All actions must be performed against a target. For example, common targets might be environments such as prod and dev.","title":"Concepts"},{"location":"concepts/#concepts","text":"","title":"Concepts"},{"location":"concepts/#project","text":"A Laz project consists of at least one directory containing a laz.yml configuration file. A project can have multiple directories with each of them having 0 or 1 laz.yml files except for the top level which must have 1. Lower-level directories containing a laz.yml file are called sub-projects.","title":"Project"},{"location":"concepts/#configuration","text":"A laz.yml encapsulates the configuration for a directory. It also inherits and/or overrides the configurations found in parent directories within the same project.","title":"Configuration"},{"location":"concepts/#inheritance","text":"Sub-projects \"inherit\" configuration from parent projects but will also overwrite configuration that they share.","title":"Inheritance"},{"location":"concepts/#action","text":"Actions are commands, functions, or tasks to be run. They can be as simple as a single CLI command or as complicated as a series of CLI commands, Python functions, and plugin actions. CLI commands can be run by Laz without codifying them in a laz.yml. Complicated or common tasks can be codified in a laz.yml as actions.","title":"Action"},{"location":"concepts/#target","text":"All actions must be performed against a target. For example, common targets might be environments such as prod and dev.","title":"Target"},{"location":"configuration/","text":"Configuration TODO","title":"Configuration"},{"location":"configuration/#configuration","text":"TODO","title":"Configuration"},{"location":"plugins/","text":"Plugins Jinja TODO AWS TODO Terraform TODO","title":"Plugins"},{"location":"plugins/#plugins","text":"","title":"Plugins"},{"location":"plugins/#jinja","text":"TODO","title":"Jinja"},{"location":"plugins/#aws","text":"TODO","title":"AWS"},{"location":"plugins/#terraform","text":"TODO","title":"Terraform"},{"location":"quick_start/","text":"Quick Start Configuration File A basic example configuration file may look like the following: env: ENV_VAR: value targets: prod: dev: actions: default: echo default example: echo example The above configuration file defines a few different things: An environment variable named ENV_VAR with the value value to be exposed to all commands run by Laz. Two targets: prod and dev . Two defined actions, default and example . They simply invoke shell which echo \"default\" and \" example\", respectively. Note that nothing is stopping you from storing additional information in other top-level keys. Targets A typical Laz command looks like the following: laz <path> [<arg1>] ... [<argN>] A Laz command will not run if the given path does not resolve to defined targets. For example, to run a command against the dev target defined in the previous example configuration file, you would run something like: $ laz dev echo hello hello You can run commands against multiple targets using glob patterns: $ laz \"*\" echo hello hello hello Actions If you have a set of commands that you run often, you can codify them as an action: targets: dev: actions: default: echo i am the default action things: - echo thing 1 - echo thing 2 $ laz dev things thing 1 thing 2 If you do not provide an action, Laz will attempt to run a default action. $ laz dev i am the default action Jinja Variables Laz uses Jinja to provide access to the entire configuration context during the evaluation of Jinja variables. For example, if you want to print out an arbitrary configuration field: abc: xyz target: dev: $ laz dev echo \"{{ abc }}\" xyz There are other special values added to the configuration dynamically such as the name of the current target. $ laz dev echo \"{{ target.name }}\" dev Hooks Hooks can be used to perform actions before or after certain points in the program. The built-in hooks that are available are: before_all - Runs before all targets. before_target - Runs before each target. after_target - Runs after each target. after_all - Runs after all targets. target: dev: prod: hooks: before_all: echo before all before_target: echo before target after_target: echo after target after_all: echo after all $ laz \"*\" echo \"{{ target.name }}\" before all before target dev after target before target prod after target after all Plugins TODO Sub-Projects TODO","title":"Quick Start"},{"location":"quick_start/#quick-start","text":"","title":"Quick Start"},{"location":"quick_start/#configuration-file","text":"A basic example configuration file may look like the following: env: ENV_VAR: value targets: prod: dev: actions: default: echo default example: echo example The above configuration file defines a few different things: An environment variable named ENV_VAR with the value value to be exposed to all commands run by Laz. Two targets: prod and dev . Two defined actions, default and example . They simply invoke shell which echo \"default\" and \" example\", respectively. Note that nothing is stopping you from storing additional information in other top-level keys.","title":"Configuration File"},{"location":"quick_start/#targets","text":"A typical Laz command looks like the following: laz <path> [<arg1>] ... [<argN>] A Laz command will not run if the given path does not resolve to defined targets. For example, to run a command against the dev target defined in the previous example configuration file, you would run something like: $ laz dev echo hello hello You can run commands against multiple targets using glob patterns: $ laz \"*\" echo hello hello hello","title":"Targets"},{"location":"quick_start/#actions","text":"If you have a set of commands that you run often, you can codify them as an action: targets: dev: actions: default: echo i am the default action things: - echo thing 1 - echo thing 2 $ laz dev things thing 1 thing 2 If you do not provide an action, Laz will attempt to run a default action. $ laz dev i am the default action","title":"Actions"},{"location":"quick_start/#jinja-variables","text":"Laz uses Jinja to provide access to the entire configuration context during the evaluation of Jinja variables. For example, if you want to print out an arbitrary configuration field: abc: xyz target: dev: $ laz dev echo \"{{ abc }}\" xyz There are other special values added to the configuration dynamically such as the name of the current target. $ laz dev echo \"{{ target.name }}\" dev","title":"Jinja Variables"},{"location":"quick_start/#hooks","text":"Hooks can be used to perform actions before or after certain points in the program. The built-in hooks that are available are: before_all - Runs before all targets. before_target - Runs before each target. after_target - Runs after each target. after_all - Runs after all targets. target: dev: prod: hooks: before_all: echo before all before_target: echo before target after_target: echo after target after_all: echo after all $ laz \"*\" echo \"{{ target.name }}\" before all before target dev after target before target prod after target after all","title":"Hooks"},{"location":"quick_start/#plugins","text":"TODO","title":"Plugins"},{"location":"quick_start/#sub-projects","text":"TODO","title":"Sub-Projects"},{"location":"roadmap/","text":"Roadmap Terraform Plugin AWS Plugin","title":"Roadmap"},{"location":"roadmap/#roadmap","text":"Terraform Plugin AWS Plugin","title":"Roadmap"}]}